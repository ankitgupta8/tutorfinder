workflows:
  expo-react-native-android:
    name: Expo React Native Android Build
    max_build_duration: 120
    instance_type: mac_mini_m2
    environment:
      node: 20.11.0
      vars:
        PACKAGE_NAME: "com.ankitgupta8.tutorfinder"
      xcode: latest
      java: 17
    scripts:
      - name: Set up local properties
        script: |
          mkdir -p "$CM_BUILD_DIR/android"
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/android/local.properties"
      
      - name: Install dependencies with specific versions
        script: |
          npm install -g yarn
          yarn install --frozen-lockfile
          yarn add expo@~52.0.42
          yarn add react-native@0.76.9
          yarn add @react-native-async-storage/async-storage@1.23.1
          yarn add expo-system-ui

      - name: Install required development tools
        script: |
          npm install -g eas-cli
          npm install -g sharp-cli
          
      - name: Clean project and cache
        script: |
          rm -rf node_modules/.cache
          rm -rf $HOME/.npm/_cacache
          watchman watch-del-all || true
      
      - name: Setup Metro configuration
        script: |
          if [ ! -f metro.config.js ]; then
            echo "const { getDefaultConfig } = require('@expo/metro-config');" > metro.config.js
            echo "const config = getDefaultConfig(__dirname);" >> metro.config.js
            echo "module.exports = config;" >> metro.config.js
          fi
          
          if [ ! -f app.json ]; then
            echo '{"expo": {"name": "TutorFinder", "slug": "tutorfinder"}}' > app.json
          fi

      - name: Run Expo Doctor to validate setup
        script: |
          npx expo doctor || true
          
      - name: Prebuild Android native code
        script: |
          if [ ! -f eas.json ]; then
            echo '{
              "build": {
                "development": {
                  "developmentClient": true,
                  "distribution": "internal"
                },
                "preview": {
                  "distribution": "internal"
                },
                "production": {}
              }
            }' > eas.json
          fi
          
          export CI=true
          export EAS_NO_VCS=1
          npx expo prebuild --platform android --clean

      - name: Setup keystore for signing
        script: |
          if [ -n "$CM_KEYSTORE" ]; then
            echo $CM_KEYSTORE | base64 --decode > $CM_BUILD_DIR/android/app/keystore.jks
            
            # Create a separate file for signing config
            echo "android {" > $CM_BUILD_DIR/android/app/signing-config.gradle
            echo "    signingConfigs {" >> $CM_BUILD_DIR/android/app/signing-config.gradle
            echo "        release {" >> $CM_BUILD_DIR/android/app/signing-config.gradle
            echo "            storeFile file(\"keystore.jks\")" >> $CM_BUILD_DIR/android/app/signing-config.gradle
            echo "            storePassword \"$CM_KEYSTORE_PASSWORD\"" >> $CM_BUILD_DIR/android/app/signing-config.gradle
            echo "            keyAlias \"$CM_KEY_ALIAS\"" >> $CM_BUILD_DIR/android/app/signing-config.gradle
            echo "            keyPassword \"$CM_KEY_PASSWORD\"" >> $CM_BUILD_DIR/android/app/signing-config.gradle
            echo "        }" >> $CM_BUILD_DIR/android/app/signing-config.gradle
            echo "    }" >> $CM_BUILD_DIR/android/app/signing-config.gradle
            echo "    buildTypes {" >> $CM_BUILD_DIR/android/app/signing-config.gradle
            echo "        release {" >> $CM_BUILD_DIR/android/app/signing-config.gradle
            echo "            signingConfig signingConfigs.release" >> $CM_BUILD_DIR/android/app/signing-config.gradle
            echo "        }" >> $CM_BUILD_DIR/android/app/signing-config.gradle
            echo "    }" >> $CM_BUILD_DIR/android/app/signing-config.gradle
            echo "}" >> $CM_BUILD_DIR/android/app/signing-config.gradle
            
            # Add apply from line to end of build.gradle
            echo "apply from: 'signing-config.gradle'" >> "$CM_BUILD_DIR/android/app/build.gradle"
          else
            echo "No keystore found in environment variables. APK will be unsigned."
          fi
          
      - name: Update Gradle wrapper
        script: |
          cd android
          touch gradle.properties
          echo "org.gradle.jvmargs=-Xmx4096m -XX:MaxPermSize=4096m" >> gradle.properties
          echo "org.gradle.parallel=true" >> gradle.properties
          echo "org.gradle.daemon=true" >> gradle.properties
          echo "android.useAndroidX=true" >> gradle.properties
          echo "android.enableJetifier=true" >> gradle.properties
          
      - name: Fix React Native Config 
        script: |
          cd android
          sed -i -e "s/minSdkVersion = .*/minSdkVersion = 21/" build.gradle || true
          sed -i -e "s/compileSdkVersion = .*/compileSdkVersion = 34/" build.gradle || true
          sed -i -e "s/targetSdkVersion = .*/targetSdkVersion = 33/" build.gradle || true
          
      - name: Build Android release
        script: |
          cd android
          ./gradlew clean
          ./gradlew assembleRelease --stacktrace --info
          
      - name: Generate build info
        script: |
          echo "Build completed on $(date)"
          ls -la $CM_BUILD_DIR/android/app/build/outputs/apk/release || echo "No APK found"

    artifacts:
      - android/app/build/outputs/apk/release/*.apk
      - android/app/build/outputs/**/mapping.txt

    publishing:
      email:
        recipients:
          - ankit.kapilvastu@gmail.com
        notify:
          success: true
          failure: true
